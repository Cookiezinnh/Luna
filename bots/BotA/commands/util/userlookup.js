const SoftLock = require('../../models/softlock'); // Modelo de SoftLock
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const AdminBypass = require('../../models/AdminBypass.js'); // Modelo MongoDB
const BotStaffList = require('../../models/botStaffList'); // Modelo da lista de staff
const RoleConfig = require('../../models/roleConfig');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('userlookup')
        .setDescription('Exibe informa√ß√µes de um usu√°rio.')
        .addStringOption(option =>
            option.setName('usu√°rio')
                .setDescription('ID, nome, nome#0000 ou men√ß√£o (@usu√°rio) do usu√°rio')
                .setRequired(true)),
    commandAlias: ['lookupuser', 'userinfo'],
    requiredRoles: [], // Comando acess√≠vel a todos
    supportsPrefix: true,

    async execute(context, args) {
        const isInteraction = context.isCommand?.();
        const guild = isInteraction ? context.guild : context.guild;
        const input = isInteraction ? context.options.getString('usu√°rio') : args.join(' ');
        const executor = isInteraction ? context.member : guild.members.cache.get(context.author.id);

        let user;
        let member;

        // Verifica se a entrada √© uma men√ß√£o (ex: <@123456789012345678>)
        const mentionMatch = input.match(/^<@!?(\d+)>$/);
        const userIdFromMention = mentionMatch ? mentionMatch[1] : null;

        // Busca pelo ID (usu√°rios globais ou no servidor)
        if (/^\d+$/.test(input) || userIdFromMention) {
            const userId = userIdFromMention || input; // Usa o ID da men√ß√£o ou o input diretamente
            try {
                // Tenta buscar o usu√°rio globalmente
                user = await context.client.users.fetch(userId);
                // Tenta buscar o membro no servidor
                member = await guild.members.fetch(userId).catch(() => null);
            } catch (error) {
                console.error('Erro ao buscar usu√°rio:', error);
                return isInteraction
                    ? context.reply({ content: ':x: Usu√°rio n√£o encontrado.', ephemeral: true })
                    : context.channel.send(':x: Usu√°rio n√£o encontrado.');
            }
        } else {
            // Busca pelo nome ou tag (apenas no servidor)
            member = guild.members.cache.find(m => 
                m.user.tag.toLowerCase() === input.toLowerCase() ||
                m.user.username.toLowerCase() === input.toLowerCase()
            );
            if (member) {
                user = member.user;
            } else {
                // Se o usu√°rio n√£o est√° no servidor, n√£o podemos buscar globalmente apenas pelo nome/tag
                return isInteraction
                    ? context.reply({ content: ':x: Usu√°rio n√£o encontrado no servidor. Use o ID ou men√ß√£o para buscar usu√°rios globais.', ephemeral: true })
                    : context.channel.send(':x: Usu√°rio n√£o encontrado no servidor. Use o ID ou men√ß√£o para buscar usu√°rios globais.');
            }
        }

        // Cria o embed com as informa√ß√µes do usu√°rio
        const embed = new EmbedBuilder()
            .setDescription(`# üîç Informa√ß√µes do Usu√°rio\n\n- **Nome:** ${user.username}\n- **ID:** ${user.id}`)
            .setColor(15548997)
            .setThumbnail(user.displayAvatarURL({ dynamic: true, size: 1024 }))
            .addFields(
                { name: 'Criado em', value: `<t:${Math.floor(user.createdTimestamp / 1000)}:F>`, inline: true }
            )
            .setTimestamp();

        // Se o usu√°rio est√° no servidor, adiciona informa√ß√µes adicionais
        if (member) {
            if (member.joinedAt) {
                embed.addFields({ name: 'Entrou no servidor em', value: `<t:${Math.floor(member.joinedTimestamp / 1000)}:F>`, inline: true });
            }
        } else {
            embed.addFields({ name: 'Status no Servidor', value: '-# ‚ùå | O Usu√°rio n√£o est√° no servidor', inline: true });
        }

        // Obt√©m os IDs corretos dos cargos ADMIN e MODERATOR
        const adminRoleId = await RoleConfig.findOne({ roleName: 'ADMIN' }).then(r => r ? r.roleId : null);
        const moderatorRoleId = await RoleConfig.findOne({ roleName: 'MODERATOR' }).then(r => r ? r.roleId : null);

        // Verifica se o executor possui um dos cargos
        const hasAdminRole = executor.roles.cache.has(adminRoleId) || executor.roles.cache.has(moderatorRoleId);

        if (hasAdminRole) {
            // Verifica se o usu√°rio faz parte da equipe SNOWYIE
            const isStaff = await BotStaffList.findOne({ userId: user.id });
            const isBypassed = await AdminBypass.findOne({ guildId: guild.id, userId: user.id });

            // Verifica se o usu√°rio est√° softlockado (mesmo que n√£o esteja no servidor)
            const isSoftLocked = await SoftLock.findOne({ userId: user.id, guildId: guild.id });

            embed.addFields(
                { name: 'Time de Desenvolvimento da SNOWYIE', value: isStaff ? '-# ‚úÖ | O Usu√°rio faz parte da Administra√ß√£o / Modera√ß√£o da Luna' : '-# ‚ùå | O Usu√°rio n√£o faz parte da Administra√ß√£o / Modera√ß√£o da Luna' },
                { name: 'Equipe do Servidor', value: isBypassed ? '-# ‚úÖ | O Usu√°rio Possui Permiss√£o para Utilizar o Bypass' : '-# ‚ùå | O Usu√°rio n√£o Possui Permiss√£o para Utilizar o Bypass' },
                { name: 'Status de SoftLock', value: isSoftLocked ? '-# üîí | O Usu√°rio est√° SoftLockado' : '-# üîì | O Usu√°rio n√£o est√° SoftLockado' }
            );
        }

        return isInteraction
            ? context.reply({ embeds: [embed] })
            : context.channel.send({ embeds: [embed] });
    },
};