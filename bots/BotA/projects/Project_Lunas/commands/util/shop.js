const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const Luna = require('../../../../models/lunas'); // Modelo do MongoDB
const { resources } = require('../../data/resources'); // Dados dos recursos disponÃ­veis

module.exports = {
    name: 'shop',
    description: 'Visualize e compre recursos disponÃ­veis para o seu nÃ­vel de tier.',
    commandAlias: ['loja'],
    async execute(message) {
        const userId = message.author.id;

        // Busca o perfil do usuÃ¡rio no banco de dados
        const user = await Luna.findOne({ userId });

        if (!user) {
            return message.reply('VocÃª ainda nÃ£o estÃ¡ registrado no sistema. Use o comando `start` para criar seu perfil.');
        }

        const userTier = user.tier || 1; // Tier atual do usuÃ¡rio, padrÃ£o 1 se nÃ£o definido
        let currentPage = 1; // PÃ¡gina inicial comeÃ§a no Tier 1

        // FunÃ§Ã£o para criar o embed de acordo com o tier
        const createEmbed = (tier) => {
            const filteredResources = resources.filter((item) => item.tier <= tier); // Filtra itens pelo tier

            if (filteredResources.length === 0) {
                return new EmbedBuilder()
                    .setColor(0xff0000)
                    .setTitle('Nenhum Recurso DisponÃ­vel')
                    .setDescription(`NÃ£o hÃ¡ recursos disponÃ­veis para o Tier ${tier}.`);
            }

            const resourceTable = filteredResources
                .map((item) => `\`${item.id}\` - **${item.name}** | ðŸ’° PreÃ§o: ${item.price} moedas`)
                .join('\n');

            return new EmbedBuilder()
                .setColor(0x00ff00)
                .setTitle(`Recursos DisponÃ­veis para o Tier ${tier}`)
                .setDescription(`**ID | Nome | PreÃ§o**\n${resourceTable}`)
                .setFooter({ text: 'Use o comando `$buy <ID> <quantidade>` para comprar um item!' });
        };

        // FunÃ§Ã£o para criar os botÃµes de navegaÃ§Ã£o
        const createButtons = (page) => {
            return new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId('previous')
                    .setLabel('â—€ Anterior')
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(page <= 1), // Desativa o botÃ£o "Anterior" na primeira pÃ¡gina
                new ButtonBuilder()
                    .setCustomId('next')
                    .setLabel('PrÃ³ximo â–¶')
                    .setStyle(ButtonStyle.Primary)
                    .setDisabled(page >= userTier) // Desativa o botÃ£o "PrÃ³ximo" apÃ³s o Ãºltimo tier do usuÃ¡rio
            );
        };

        // Envia o embed inicial com os itens do Tier 1
        const embed = createEmbed(currentPage);
        const buttons = createButtons(currentPage);

        const sentMessage = await message.reply({ embeds: [embed], components: [buttons] });

        // Cria um coletor para interaÃ§Ãµes com os botÃµes
        const filter = (interaction) => interaction.user.id === message.author.id;
        const collector = sentMessage.createMessageComponentCollector({ filter, time: 60000 });

        collector.on('collect', async (interaction) => {
            if (interaction.customId === 'previous') currentPage--;
            if (interaction.customId === 'next') currentPage++;

            const updatedEmbed = createEmbed(currentPage);
            const updatedButtons = createButtons(currentPage);

            await interaction.update({ embeds: [updatedEmbed], components: [updatedButtons] });
        });

        collector.on('end', () => {
            const disabledButtons = createButtons(currentPage).components.map((btn) => btn.setDisabled(true));
            sentMessage.edit({ components: [new ActionRowBuilder().addComponents(disabledButtons)] });
        });
    },
};